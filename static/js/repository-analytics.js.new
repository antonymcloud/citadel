$(document).ready(function() {
    // Format file sizes for display
    function formatSize(bytes) {
        if (bytes === 0 || bytes === null || bytes === undefined) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Format percentages with 1 decimal place
    function formatPercent(value) {
        if (value === null || value === undefined) return '0%';
        return value.toFixed(1) + '%';
    }
    
    // Format dates nicely
    function formatDate(dateString) {
        if (!dateString) return 'Never';
        
        const date = new Date(dateString);
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }
    
    // Set progress bar width and text
    function setProgressBar(id, percent) {
        const bar = document.getElementById(id);
        if (bar) {
            bar.style.width = percent + '%';
            bar.setAttribute('aria-valuenow', percent);
            
            // Set the label if it exists
            const label = document.getElementById(id + '-label');
            if (label) {
                label.textContent = formatPercent(percent);
            } else {
                bar.textContent = formatPercent(percent);
            }
        }
    }
    
    // Update analytics display function
    function updateAnalyticsDisplay(stats) {
        // Check if we have data, show appropriate alerts for missing data
        const hasData = stats && Object.keys(stats).length > 0;
        if (!hasData) {
            $('.card-body', $('#analytics-content').closest('.card')).prepend(
                '<div class="alert alert-warning">' +
                '<i class="fas fa-exclamation-triangle me-2"></i>' +
                'Limited or no analytics data available. Create more backups to see comprehensive analytics.' +
                '</div>'
            );
            return;
        }
        
        // Update analytics displays with available data, using defaults for missing data
        $('#latest-size').text(stats.latest_size || 'No data');
        
        // Handle space usage percentage
        if (stats.space_usage_percent !== null && stats.space_usage_percent !== undefined) {
            $('#space-usage').text(formatPercent(stats.space_usage_percent));
            setProgressBar('usage-bar', stats.space_usage_percent);
        } else {
            $('#space-usage').text('N/A');
            setProgressBar('usage-bar', 0);
        }
        
        // Max size is from repository settings, should always be available
        $('#max-size').text((stats.max_size || 0) + ' GB');
        
        // Archives count might be missing if no list job has been run
        $('#archives-count').text(stats.archives_count !== null ? stats.archives_count : 'Unknown');
        
        // Job statistics
        $('#total-backups').text(stats.total_jobs !== null ? stats.total_jobs : 0);
        $('#successful-backups').text(stats.successful_jobs !== null ? stats.successful_jobs : 0);
        $('#failed-backups').text(stats.failed_jobs !== null ? stats.failed_jobs : 0);
        
        // Calculate success rate
        let successRate = 0;
        if (stats.successful_jobs !== null && stats.total_jobs !== null && stats.total_jobs > 0) {
            successRate = (stats.successful_jobs / stats.total_jobs) * 100;
            $('#success-rate').text(formatPercent(successRate));
        } else {
            $('#success-rate').text('N/A');
        }
        
        // Average size and compression are derived from job data
        $('#average-size').text(stats.average_size || 'Unknown');
        $('#average-compression').text(stats.average_compression || 'Unknown');
        
        // Last backup time
        $('#last-backup').text(stats.last_backup_time ? formatDate(stats.last_backup_time) : 'Never');
    }
    
    // Update forecast display
    function updateForecastDisplay(forecast) {
        if (!forecast || Object.keys(forecast).length === 0) {
            // No forecast data available
            $('#forecast-section').hide();
            return;
        }
        
        // Set the growth rate value
        if (forecast.growth_rate !== null && forecast.growth_rate !== undefined) {
            $('#growth-rate-value').text(forecast.growth_rate + ' GB/month');
        } else {
            $('#growth-rate-value').text('Unknown');
        }
        
        // Set the full date value
        if (forecast.full_date) {
            $('#full-date-value').text(formatDate(forecast.full_date));
            
            // Add days until full
            if (forecast.days_until_full) {
                $('#full-date-note').text(`${forecast.days_until_full} days until full based on current growth rate`);
            }
        } else {
            $('#full-date-value').text('Unknown');
            $('#full-date-note').text('Not enough data to estimate');
        }
        
        // Set current usage
        if (forecast.current_usage_percent !== null && forecast.current_usage_percent !== undefined) {
            setProgressBar('current-usage-bar', forecast.current_usage_percent);
            $('#current-usage-label').text(formatPercent(forecast.current_usage_percent));
        } else {
            setProgressBar('current-usage-bar', 0);
            $('#current-usage-label').text('0%');
        }
        
        // Set forecasts for different time periods
        if (forecast.forecast_1m_size) {
            $('#forecast-1m').text(forecast.forecast_1m_size);
            setProgressBar('forecast-1m-bar', forecast.forecast_1m_percent || 0);
            $('#forecast-1m-label').text(formatPercent(forecast.forecast_1m_percent || 0));
        } else {
            $('#forecast-1m').text('Unknown');
            setProgressBar('forecast-1m-bar', 0);
            $('#forecast-1m-label').text('0%');
        }
        
        if (forecast.forecast_3m_size) {
            $('#forecast-3m').text(forecast.forecast_3m_size);
            setProgressBar('forecast-3m-bar', forecast.forecast_3m_percent || 0);
            $('#forecast-3m-label').text(formatPercent(forecast.forecast_3m_percent || 0));
        } else {
            $('#forecast-3m').text('Unknown');
            setProgressBar('forecast-3m-bar', 0);
            $('#forecast-3m-label').text('0%');
        }
        
        if (forecast.forecast_6m_size) {
            $('#forecast-6m').text(forecast.forecast_6m_size);
            setProgressBar('forecast-6m-bar', forecast.forecast_6m_percent || 0);
            $('#forecast-6m-label').text(formatPercent(forecast.forecast_6m_percent || 0));
        } else {
            $('#forecast-6m').text('Unknown');
            setProgressBar('forecast-6m-bar', 0);
            $('#forecast-6m-label').text('0%');
        }
    }
    
    // Analytics functions
    function loadAnalytics() {
        $('#analytics-loading').removeClass('d-none');
        $('#analytics-content').addClass('d-none');
        
        // Load repository statistics
        $.ajax({
            url: repoStatsApiUrl,
            type: 'GET',
            dataType: 'json',
            success: function(stats) {
                console.log("Stats loaded successfully:", stats);
                
                try {
                    // Convert any "None" string values to null
                    Object.keys(stats).forEach(key => {
                        if (stats[key] === "None") {
                            stats[key] = null;
                        }
                        
                        // Also check nested objects in size_trend
                        if (key === 'size_trend' && Array.isArray(stats[key])) {
                            stats[key].forEach(point => {
                                Object.keys(point).forEach(pointKey => {
                                    if (point[pointKey] === "None") {
                                        point[pointKey] = null;
                                    }
                                });
                            });
                        }
                    });
                    
                    updateAnalyticsDisplay(stats);
                    
                    // Load the growth chart
                    loadGrowthChart();
                    
                    // Load the frequency chart
                    loadFrequencyChart();
                    
                    // Create success rate chart
                    createSuccessRateChart(stats.successful_jobs, stats.failed_jobs);
                    
                    // Also load forecast data
                    $.ajax({
                        url: repoForecastApiUrl,
                        type: 'GET',
                        dataType: 'json',
                        success: function(forecast) {
                            console.log("Forecast loaded successfully:", forecast);
                            
                            // Convert any "None" string values to null
                            Object.keys(forecast).forEach(key => {
                                if (forecast[key] === "None") {
                                    forecast[key] = null;
                                }
                            });
                            
                            updateForecastDisplay(forecast);
                        },
                        error: function(xhr, status, error) {
                            console.error('Failed to load forecast data:', error);
                            console.error('Response:', xhr.responseText);
                            
                            // Still show analytics without forecast
                            $('#forecast-section').hide();
                        }
                    });
                } catch (e) {
                    console.error("Error processing analytics data:", e);
                    $('#analytics-loading').addClass('d-none');
                    $('#analytics-content').removeClass('d-none').html(`
                        <div class="alert alert-danger">
                            <h5><i class="fas fa-exclamation-circle"></i> Error loading analytics</h5>
                            <p>There was a problem processing the analytics data. Please try again later.</p>
                            <p><small>Technical details: ${e.message}</small></p>
                        </div>
                    `);
                }
                
                // Finally, always show the content and hide the loading indicator, even if there was an error
                setTimeout(function() {
                    $('#analytics-loading').addClass('d-none');
                    $('#analytics-content').removeClass('d-none');
                }, 500);
            },
            error: function(xhr, status, error) {
                console.error('Failed to load analytics data:', error);
                console.error('Response:', xhr.responseText);
                
                // Show an error message in the analytics section
                $('#analytics-loading').addClass('d-none');
                $('#analytics-content').removeClass('d-none');
                
                // Add error alert
                $('.card-body', $('#analytics-content').closest('.card')).prepend(
                    '<div class="alert alert-danger">' +
                    '<i class="fas fa-exclamation-circle me-2"></i>' +
                    'Failed to load analytics data: ' + error +
                    '</div>'
                );
            }
        });
    }
    
    function loadGrowthChart() {
        console.log("Loading growth chart...");
        $.ajax({
            url: repoGrowthChartUrl,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Growth chart response:", response);
                
                // Check if we have data to show in the new format
                if (response.growth_data && response.growth_data.labels && response.growth_data.data && 
                    response.growth_data.labels.length >= 2 && response.growth_data.data.length >= 2) {
                    
                    // We have structured data in the new format, create a chart
                    $('#growth-chart-no-data').addClass('d-none');
                    
                    // Prepare the container with a fresh canvas
                    $('#growth-chart-container').html('<canvas id="growth-chart"></canvas>');
                    
                    // Create the chart with the provided data
                    const ctx = document.getElementById('growth-chart').getContext('2d');
                    growthChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: response.growth_data.labels,
                            datasets: [{
                                label: 'Repository Size (GB)',
                                data: response.growth_data.data,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 2,
                                tension: 0.3,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Size (GB)'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Date'
                                    }
                                }
                            },
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        title: function(tooltipItems) {
                                            return tooltipItems[0].label;
                                        },
                                        label: function(context) {
                                            let label = response.growth_data.archive_names ? 
                                                        response.growth_data.archive_names[context.dataIndex] || '' : '';
                                            let value = context.raw;
                                            
                                            if (label) {
                                                return `${label}: ${value.toFixed(2)} GB`;
                                            } else {
                                                return `${value.toFixed(2)} GB`;
                                            }
                                        }
                                    }
                                },
                                legend: {
                                    display: true,
                                    position: 'top'
                                }
                            }
                        }
                    });
                    
                    // If it's sample data, show a note
                    if (response.is_sample_data) {
                        $('#growth-chart-container').append(
                            '<div class="alert alert-info mt-3 text-center">' +
                            '<i class="fas fa-info-circle me-2"></i>' +
                            (response.message || 'This is sample data. Create more backups to see actual growth.') +
                            '</div>'
                        );
                    }
                } else {
                    // No valid data, show the no-data message
                    $('#growth-chart-container').html('');
                    $('#growth-chart-no-data').removeClass('d-none');
                    
                    // Add a more detailed message if provided
                    if (response.message) {
                        $('#growth-chart-no-data').html(
                            '<i class="fas fa-info-circle me-2"></i>' + response.message
                        );
                    }
                }
            },
            error: function(xhr, status, error) {
                console.error('Failed to load growth chart data:', error);
                $('#growth-chart-container').html('');
                $('#growth-chart-no-data').removeClass('d-none');
                $('#growth-chart-no-data').html(
                    '<i class="fas fa-exclamation-circle me-2"></i>Error loading growth chart data: ' + error
                );
            }
        });
    }
    
    function loadFrequencyChart() {
        console.log("Loading frequency chart...");
        $.ajax({
            url: repoFrequencyChartUrl,
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Frequency chart response:", response);
                
                // Check if we have data to show
                if (response.chart_data && response.chart_data.labels && response.chart_data.datasets && 
                    response.chart_data.labels.length > 0) {
                    
                    // We have structured data, create a chart
                    $('#frequency-chart-no-data').addClass('d-none');
                    
                    // Prepare the container with a fresh canvas
                    $('#frequency-chart-container').html('<canvas id="frequency-chart"></canvas>');
                    
                    // Create the chart with the provided data
                    const ctx = document.getElementById('frequency-chart').getContext('2d');
                    frequencyChart = new Chart(ctx, {
                        type: response.chart_data.type || 'bar',
                        data: {
                            labels: response.chart_data.labels,
                            datasets: response.chart_data.datasets
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Number of Backups'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    display: response.chart_data.datasets.length > 1
                                },
                                tooltip: {
                                    callbacks: {
                                        title: function(tooltipItems) {
                                            return tooltipItems[0].label;
                                        },
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            let value = context.raw;
                                            
                                            if (label) {
                                                return `${label}: ${value}`;
                                            } else {
                                                return `${value} backups`;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    });
                    
                    // If it's sample data, show a note
                    if (response.is_sample_data) {
                        $('#frequency-chart-container').append(
                            '<div class="alert alert-info mt-3 text-center">' +
                            '<i class="fas fa-info-circle me-2"></i>' +
                            'This is sample data. Create more backups to see actual frequency.' +
                            '</div>'
                        );
                    }
                } else {
                    // No valid data, show the no-data message
                    $('#frequency-chart-container').html('');
                    $('#frequency-chart-no-data').removeClass('d-none');
                }
            },
            error: function(xhr, status, error) {
                console.error('Failed to load frequency chart data:', error);
                $('#frequency-chart-container').html('');
                $('#frequency-chart-no-data').removeClass('d-none');
                $('#frequency-chart-no-data').html(
                    '<i class="fas fa-exclamation-circle me-2"></i>Error loading frequency chart data: ' + error
                );
            }
        });
    }
    
    function createSuccessRateChart(successCount, failCount) {
        if (successCount === null || failCount === null) {
            $('#success-chart-no-data').removeClass('d-none');
            return;
        }
        
        const total = successCount + failCount;
        if (total === 0) {
            $('#success-chart-no-data').removeClass('d-none');
            return;
        }
        
        const successRate = (successCount / total) * 100;
        const failRate = (failCount / total) * 100;
        
        // Create a doughnut chart
        const ctx = document.getElementById('success-rate-chart').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Success', 'Failed'],
                datasets: [{
                    data: [successRate, failRate],
                    backgroundColor: ['rgba(40, 167, 69, 0.8)', 'rgba(220, 53, 69, 0.8)'],
                    borderColor: ['rgba(40, 167, 69, 1)', 'rgba(220, 53, 69, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let value = context.raw;
                                return `${value.toFixed(1)}%`;
                            }
                        }
                    }
                }
            }
        });
        
        // Also show the success rate as text in the center
        $('#success-rate-chart').after(`
            <div class="success-rate-value">${successRate.toFixed(1)}%</div>
        `);
    }
    
    // Event Handlers
    $('#refreshAnalytics').on('click', function() {
        loadAnalytics();
    });
    
    // Initial load of analytics
    loadAnalytics();
});
